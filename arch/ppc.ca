#Reg cc  { Code = 0 } , eax { Code = 0 } ;
#Reg ecx { Code = 1 } , ebx { Code = 2 } , edx { Code = 3 } ;
#Reg esp { Code = 4 } ;
#Reg ebp { Code = 5 } ;
#Reg esi { Code = 6 } ;
#Reg edi { Code = 7 } ;

#RegClass flags    { Bits = 16, Regs = [cc] } ;
#RegClass gpr      { Bits = 32, Regs = [eax, ecx, ebx, edx, esp, ebp, esi, edi] } ;
#RegClass gpr_byte { Bits = 32, Regs = [eax, ecx, ebx, edx] } ;
#RegClass gpr_eax  { Bits = 32, Regs = [eax] } ;
#RegClass gpr_edx  { Bits = 32, Regs = [edx] } ;
#RegClass gpr_esp  { Bits = 32, Regs = [esp] } ; 

Reg r3 { Code = 3 } ;
Reg r4 { Code = 4 } ;
Reg r5 { Code = 5 } ;
Reg r6 { Code = 6 } ;
Reg r7 { Code = 7 } ;
Reg r8 { Code = 8 } ;
Reg r9 { Code = 9 } ;

RegClass gpr { NBits = 32, Regs = [r3,r4,r5,r6,r7,r8,r9] } ;

%%

Instr addi{
  Input = [gpr k, gpr r],
  Output = [gpr f],
  Encoding = '00' #24.bstr[0:5] ++ rt.code.bstr[0:5] ++ ra.code.bstr[0:5] ++ si.bstr[0:16],
  #Flags = [Commutative, OverwriteInput]
} ;

#Instr ori{
#  Input = [gpr ra, Int ui],
#  Output = [gpr rs],
#  Encoding = 24.bstr[0:6] ++ rs.code.bstr[0:5] ++ ra.code.bstr[0:5] ++ ui.bstr[0:16],
#  Flags = [Commutative]
#} ;

#Instr and0{
#  Input = [],
#  Output = [],
#  Encoding = If 3 == 3 Then If 2 == 2 Then '' Else '11110000' Else '00001111', #++ 24.bstr[0:6] ++ rs.code.bstr[0:5] ++ ra.code.bstr[0:5] ++ rb.code.bstr[0:5] ++ 28.bstr[0:10] ++ '0',
#  Flags = [OverwriteInput]
#} ;

%%

#Match m0{
#  Input = [gpr i1, gpr i2],
#  IPattern = [ d, c = constant [JVBitconstant] (t,z,f),
#               k, g = add [JVAdd] (k,l,g) ]
#},
#m1{
#  Input = [gpr i1, gpr i2]
#},
#m2{
#  Input = [gpr i1, gpr i2]
#} ;

Match m3{
  Input = [gpr i1, gpr i2],
  Output = [gpr o1],
  IPattern = [
    sum = add0[JVAdd](i1, i2),
    o1 = add1[JVLoad](sum,i1)
  ],
  RefNode = add1,
  OPattern = [
    sum0 = add00[addi](i1, i2)
    #o1 = add1[addi](i1, sum)
  ]
} ;

AbstractNode JVLoa{
  Matches = [m3]
} ;
