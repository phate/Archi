Reg cc  { Code = 0 } , eax { Code = 0 } ;
Reg ecx { Code = 1 } , ebx { Code = 2 } , edx { Code = 3 } ;
Reg esp { Code = 4 } ;
Reg ebp { Code = 5 } ;
Reg esi { Code = 6 } ;
Reg edi { Code = 7 } ;

RegClass flags    { Bits = 16, Regs = [cc] } ;
RegClass gpr      { Bits = 32, Regs = [eax, ecx, ebx, edx, esp, ebp, esi, edi] } ;
RegClass gpr_byte { Bits = 32, Regs = [eax, ecx, ebx, edx] } ;
RegClass gpr_eax  { Bits = 32, Regs = [eax] } ;
RegClass gpr_edx  { Bits = 32, Regs = [edx] } ;
RegClass gpr_esp  { Bits = 32, Regs = [esp] } ; 

%%

Instr
  ret{
    Input = [gpr k],
    Output = [],
    Encoding = '01011101'[2:5] ++ '11100000000'
  },
  load_imm{
    Input = [Int i],
    Output = [gpr r],
    Encoding = '01010101'
  },
  load32_disp{
    Input = [gpr base, Int offset],
    Output = [gpr r],
    Encoding = '10101111'
  },
  int_add{
    Input = [gpr x, gpr y],
    Output = [gpr r, flags f],
    Encoding = '01010111'
} ;

