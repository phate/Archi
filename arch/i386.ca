Reg cc  { Code = 0 } , eax { Code = 0 } ;
Reg ecx { Code = 1 } , ebx { Code = 2 } , edx { Code = 3 } ;
Reg esp { Code = 4 } ;
Reg ebp { Code = 5 } ;
Reg esi { Code = 6 } ;
Reg edi { Code = 7 } ;

RegClass flags    { NBits = 16, Regs = [cc] } ;
RegClass gpr      { NBits = 32, Regs = [eax, ecx, ebx, edx, esp, ebp, esi, edi] } ;
RegClass gpr_byte { NBits = 32, Regs = [eax, ecx, ebx, edx] } ;
RegClass gpr_eax  { NBits = 32, Regs = [eax] } ;
RegClass gpr_edx  { NBits = 32, Regs = [edx] } ;
RegClass gpr_esp  { NBits = 32, Regs = [esp] } ; 

%%

Instr ret{
  Input = [],
  Output = [],
  Encoding = '11000011'
} ;

Instr int_load_imm{
  Input = [Int immediate],
  Output = [gpr reg],
  Encoding = '10111' ++ reg.code.bstr[0:3] ++ immediate.bstr[0:32]
} ;

#Instr int_load32_disp{
#  Input = [gpr r1, Int displacement],
#  Output = [gpr r2],
#  Encoding = '10001011' ++ 
#} ;

Instr int_add{
  Input = [gpr r1, gpr r2],
  Output = [gpr r3, flags f],
  Encoding = 1.bstr[0:8] ++ '11' ++ r2.code.bstr[0:3] ++ r1.code.bstr[0:3],
  Flags = [Commutative, OverwriteInput]
} ;

Instr int_sub{
  Input = [gpr r1, gpr r2],
  Output = [gpr r3, flags f],
  Encoding = '00101001' ++ '11' ++ r2.code.bstr[0:3] ++ r1.code.bstr[0:3],
  Flags = [OverwriteInput]
} ;

Instr int_and{
  Input = [gpr r1, gpr r2],
  Output = [gpr r3, flags f],
  Encoding = '00110001' ++ '11' ++ r2.code.bstr[0:3] ++ r1.code.bstr[0:3],
  Flags = [Commutative, OverwriteInput]
} ;

Instr int_or{
  Input = [gpr r1, gpr r2],
  Output = [gpr r3, flags f],
  Encoding = '00001001' ++ '11' ++ r2.code.bstr[0:3] ++ r1.code.bstr[0:3],
  Flags = [Commutative, OverwriteInput] 
} ;

Instr int_xor{
  Input = [gpr r1, gpr r2],
  Output = [gpr r3, flags f],
  Encoding = '00110001' ++ '11' ++ r2.code.bstr[0:3] ++ r1.code.bstr[0:3],
  Flags = [Commutative, OverwriteInput]
} ;

Instr int_mul{
  Input = [gpr r1, gpr r2],
  Output = [gpr r3, flags f],
  Encoding = '0000111110101111' ++ '11' ++ r1.code.bstr[0:3] ++ r2.code.bstr[0:3],
  Flags = [Commutative, OverwriteInput]
} ;

Instr int_transfer{
  Input = [gpr r1],
  Output = [gpr r2],
  Encoding = '10001001' ++ '11' ++ r1.code.bstr[0:3] ++ r2.code.bstr[0:3]
} ;

%%

Match m{
  Input = [gpr i]
} ;
